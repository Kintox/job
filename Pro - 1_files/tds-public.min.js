function tds_init() {
    window.tds = {};
    window.tds.isDocOpening = false;
    tds_setLang();
    const allrecords = document.getElementById('allrecords');
    const rootZone = (allrecords && allrecords.getAttribute('data-tilda-root-zone')) || '';
    if (rootZone) {
        window.tds.docsURL = `https://docs.tildaapi.${rootZone}/api/`;
        window.tds.membersURL = `https://members.tildaapi.${rootZone}/api/`;
    } else {
        window.tds.docsURL = 'https://docs.tildacdn.com/api';
        window.tds.membersURL = 'https://members2.tildacdn.com/api';
    }
    window.sessionStorage.clear();
    tds_drawPanelPreloader();
    tds_getTree().then(response => {
        tds_removePreloader();
        if (!response.isOk || !response.data?.success) {
            tds_drawPanelError();
            return;
        }

        window.tds.tree = response.data.tree;
        window.tds.homepage = window.tds.tree.find(doc => doc.ishomepage);
        window.tds.contentWrapper = document.querySelector('.tds-contentcontainer');
        window.tds.contentContainer = document.querySelector('.tds-content');
        window.tds.panelContainer = document.querySelector('.tds-panel__inner');
        window.tds.contentDocument = document.implementation.createHTMLDocument();
        window.tds.fentchingDocs = [];
        const defaultProjectTitle = response.data.projectTitle || '';

        tds_getProjectSettings().then(response => {
            if (!response.isOk || !response.data?.success) {
                tds_drawPanelError();
                return;
            }
            window.tds.projectSettings = response.data.projectSettings || {};
            window.tds.title = window.tds.homepage
                ? window.tds.homepage.title || ''
                : window.tds.projectSettings.docstitle || defaultProjectTitle;

            if (!window.tds.projectSettings.isnavigationvisible) {
                const {uuid} = window;
                const {tree} = window.tds;
                let rootDoc = tree.find(doc => doc.uuid === uuid);
                while (rootDoc && rootDoc.parentUuid) {
                    const parentUuid = rootDoc.parentUuid;
                    const parentDoc = tree.find(doc => doc.uuid === parentUuid);
                    if (parentDoc) {
                        rootDoc = parentDoc;
                    } else {
                        break;
                    }
                }
                if (rootDoc) {
                    const childdrenUuids = tds_getDocChildrenUuids(rootDoc.uuid);
                    window.tds.tree = window.tds.tree.filter(doc => childdrenUuids.includes(doc.uuid));
                }
            }

            tds_setPanelState();
            tds_drawPanel();
            tds_setHandlers();
            tds_openDocActions();
        });
    });
}

function tds_setLang() {
    const SUPPORTED_LANGS = ['EN', 'RU'];
    const DEFAULT_LANG = 'EN';

    let lang = (window.navigator.userLanguage || window.navigator.language || '').slice(0, 2);
    lang = lang.toUpperCase();
    window.lang = SUPPORTED_LANGS.includes(lang) ? lang : DEFAULT_LANG;
}

function tds_openDocActions() {
    tds_drawContentHeader();
    tds_drawBreadcrumbs();
    tds_initMarkdownBlocks(() => {
        tds_initCodeHightlight();
        tds_drawAuthor();
        tds_drawTime();
        tds_drawHeadersButtons();
        tds_drawSibling();
        tds_drawHeadersNav();
        tds_setContentHandlers();
        tds_initLazyLoad();

        if (window.location.hash) {
            const hash = window.location.hash.substring(1);
            const anchor =
                document.querySelector(`.tds-content h2[data-id="${hash}"]`) ||
                document.querySelector(`.t-redactor__anchor[data-id="${hash}"]`);
            if (anchor) tds_scrollIntoView(anchor, 10);
        }
    });
}

function tds_setPanelState() {
    if (!window.tds.projectSettings.isnavigationvisible && window.tds.tree.length <= 1) {
        return;
    }

    const panel = document.querySelector('.tds-panel');
    panel.classList.add('tds-panel_rendered');
    const isMobile = window.matchMedia('(max-width: 1023px)').matches;
    const burgerBtn = document.querySelector('.tds-panel__burger');

    if (isMobile) {
        panel.classList.add('tds-panel_hidden');
    }

    const burgerIconHtml = `
        <svg class="tds-icon" viewBox='0 0 20 20' preserveAspectRatio="xMidYMid meet">
            <path d="M3.31299 7.646V6.25H17V7.646H3.31299Z"/>
            <path d="M3.31299 11.313V9.91699H17V11.313H3.31299Z"/>
            <path d="M3.31299 13.604V15H17V13.604H3.31299Z"/>
        </svg>
    `;
    burgerBtn.insertAdjacentHTML('beforeend', burgerIconHtml);
}

function tds_drawPanelPreloader() {
    const panelContainer = window.tds.panelContainer;
    if (!panelContainer) return;
    let preloaderGhosts = '';
    for (let i = 0; i < 7; i++) {
        const ghostDelay = Math.round(Math.random() * 500);
        preloaderGhosts += `
            <span
                class="tds-panel__preloader-ghost"
                style="animation-delay:${ghostDelay}ms;"
            >
            </span>
        `;
    }
    const preloaderHtml = `
        <div class="tds-panel__preloader">
            ${preloaderGhosts}
        </div>
    `;
    panelContainer.insertAdjacentHTML('beforeend', preloaderHtml);
}

function tds_drawDocPreloader() {
    const contentContainer = window.tds.contentContainer;
    let preloaderGhosts = '';
    for (let i = 0; i < 8; i++) {
        const ghostDelay = Math.round(Math.random() * 500);
        preloaderGhosts += `
            <span
                class="tds-content__preloader-ghost"
                style="animation-delay:${ghostDelay}ms;"
            >
            </span>
        `;
    }
    const preloaderHtml = `
        <div class="tds-content__preloader">
            ${preloaderGhosts}
        </div>
    `;
    contentContainer.insertAdjacentHTML('beforeend', preloaderHtml);
}

function tds_removePreloader() {
    const panelPreloader = document.querySelector('.tds-panel__preloader');
    const docPreloader = document.querySelector('.tds-content__preloader');
    if (panelPreloader) panelPreloader.remove();
    if (docPreloader) docPreloader.remove();
}

function tds_getTree() {
    /*
    uuid - уникальный идентификатор документа
    в отличие от числового id представляет собой строку
    случайных символов. Введен для невозможности
    перебора документов.
    */

    let URL = '/tdocs/tree/';
    let method = 'GET';
    let body = void 0;
    const isMembersClosed = !!window.tildaMembers;
    if (isMembersClosed) {
        const profile = window.localStorage.getItem('tilda_members_profile' + window.projectid);
        let token = '';
        try {
            token = JSON.parse(profile).token;
        } catch (err) {
            //No token nothing to do
        }
        if (token) {
            URL = window.tds.membersURL + '/getdocs/';
            method = 'POST';
            body = {
                projectid: window.projectid,
                token: token,
            };
        }
    }

    return tds_fetch(URL, method, body);
}

function tds_getDoc(uuid) {
    const URL = window.tds.docsURL + '/v1/document/';
    const body = {
        uuid: uuid,
    };
    return tds_fetch(URL, 'POST', body);
}

function tds_getProjectSettings() {
    const URL = '/tdocs/settings/';
    const method = 'GET';
    return tds_fetch(URL, method);
}

function tds_drawPanelError() {
    const panelContainer = window.tds.panelContainer;
    if (!panelContainer) return;
    const errorHtml = `
        <div class="tds-panel__error">
            ${tds_translate('load_error')}
        </div>
    `;
    panelContainer.insertAdjacentHTML('beforeend', errorHtml);
}

function tds_drawDocError() {
    const contentContainer = window.tds.contentContainer;
    if (!contentContainer) return;
    const errorHtml = `
        <div class="tds-content__error">
            ${tds_translate('load_error')}
        </div>
    `;
    contentContainer.insertAdjacentHTML('beforeend', errorHtml);
}

function tds_drawPanel() {
    const panelContainer = window.tds.panelContainer;
    const docsListHtml = tds_generateListHtml(window.tds.tree);
    const homepageLink = window.location.origin + '/tdocs/';
    const homepage = window.tds.tree.find(doc => doc.ishomepage);
    let uuid = '';
    if (homepage) {
        uuid = homepage.uuid;
    } else {
        const firstdoc = window.tds.tree.find(doc => !doc.isfolder && !doc.islink);
        if (firstdoc) {
            uuid = firstdoc.uuid;
        }
    }
    const docsPanelHeadHtml = `
        <div class="tds-panel__head">
            <a
                class="tds-panel__title"
                href="${homepageLink}"
                ${uuid.length ? `data-uuid="${uuid}"` : ''}
            >
                ${window.tds.title.replace(/&/g, '&amp;')}
            </a>
            <button class="tds-btn tds-panel__search" aria-label="${tds_translate('search_open')}">
                <svg class="tds-icon" viewBox="0 0 18 18" preserveAspectRatio="xMidYMid meet">
                    <path d="M7.942 4.77a3.173 3.173 0 1 0 0 6.345 3.173 3.173 0 0 0 0-6.346ZM3.5 7.941a4.442 4.442 0 1 1 8.885 0 4.442 4.442 0 0 1-8.885 0Z" />
                    <path d="M10.455 10.455a.635.635 0 0 1 .898 0l2.961 2.962a.634.634 0 1 1-.897.897l-2.962-2.961a.635.635 0 0 1 0-.898Z"/>
                </svg>
            </button>
        </div>
    `;
    const mainPageHtml = `
        <div class="tds-panel__page tds-docslist">
            ${docsPanelHeadHtml}
            ${docsListHtml}
        </div>
    `;
    const searchPageHtml = `
        <div class="tds-panel__page tds-search">
            <button class="tds-btn tds-search__close-btn" aria-label="${tds_translate('search_close')}">
                <svg class="tds-icon" viewBox="0 0 20 20" preserveAspectRatio="xMidYMid meet">
                    <path d="M10 15.688 4.312 10 10 4.312l.771.792-4.375 4.354h9.292v1.084H6.396l4.375 4.354Z"/>
                </svg>
            </button>
            <div class="tds-search__input-container">
                <svg class="tds-icon" viewBox="0 0 18 18" preserveAspectRatio="xMidYMid meet">
                    <path d="M7.942 4.77a3.173 3.173 0 1 0 0 6.345 3.173 3.173 0 0 0 0-6.346ZM3.5 7.941a4.442 4.442 0 1 1 8.885 0 4.442 4.442 0 0 1-8.885 0Z" />
                    <path d="M10.455 10.455a.635.635 0 0 1 .898 0l2.961 2.962a.634.634 0 1 1-.897.897l-2.962-2.961a.635.635 0 0 1 0-.898Z" />
                </svg>
                <input type="search" class="tds-search__input" placeholder="${tds_translate('search')}">
            </div>
            <div class="tds-search__result-container"></div>
        </div>
    `;
    panelContainer.insertAdjacentHTML('beforeend', mainPageHtml);
    panelContainer.insertAdjacentHTML('beforeend', searchPageHtml);
    const activeItem = document.querySelector('.tds-panel__item_active');
    if (activeItem) tds_expandItem(activeItem);
}

function tds_getDocChildrenUuids(parentUuid) {
    const {tree} = window.tds;
    const childrenUuids = [];
    const parentDoc = tree.find(doc => doc.uuid === parentUuid);
    if (!parentDoc) return childrenUuids;
    childrenUuids.push(parentUuid);

    const children = tree
        .filter(doc => doc.parentUuid === parentUuid)
        .map(doc => tds_getDocChildrenUuids(doc.uuid))
        .flat();
    childrenUuids.push(...children);
    return childrenUuids;
}

function tds_generateListHtml(tree) {
    tree = tree.filter(doc => !doc.ishomepage);
    if (!tree.length) return '';

    let listHtml = '<ul class="tds-panel__list">';
    for (let key = 0; key < tree.length; key++) {
        if (key > 0) {
            let flag = false;
            for (let j = key - 1; j >= 0; j--) {
                flag = flag || tree[key].parentUuid === tree[j].uuid;
            }
            if (flag) continue;
        }
        listHtml += tds_generateItemHtml(tree[key]);
    }
    listHtml += '</ul>';
    return listHtml;
}

function tds_generateItemHtml(item) {
    if (!item) return '';
    const docSubListArray = window.tds.tree.filter(children => children.parentUuid === item.uuid);
    const docSubListHtml = tds_generateListHtml(docSubListArray);
    const currentURL = new URL(window.location);
    const linkHref = item.islink
        ? item.linkurl
        : currentURL.protocol + '//' + currentURL.hostname + '/tdocs/' + item.fullPath;
    let expandBtnClassName = 'tds-panel__expand-btn';
    if (!docSubListHtml) expandBtnClassName += ' tds-panel__expand-btn_hidden';
    const activeDocPath = tds_getActiveDocPath();
    const isExpanded = activeDocPath.includes(item);
    let itemClassName = 'tds-panel__item';
    if (item.uuid === window.uuid) itemClassName += ' tds-panel__item_active';
    if (isExpanded) itemClassName += ' tds-panel__item_expanded';
    const isIconsHidden = window.tds.projectSettings.isdocsiconshidden;
    const docIcon = !isIconsHidden
        ? `
            <svg class="tds-icon" viewBox='0 0 20 20' preserveAspectRatio="xMidYMid meet">
                <path d="M7 15H13V13.5H7V15ZM7 12H13V10.5H7V12ZM5.5 18C5.08333 18 4.72933 17.854 4.438 17.562C4.146 17.2707 4 16.9167 4 16.5V3.5C4 3.08333 4.146 2.72933 4.438 2.438C4.72933 2.146 5.08333 2 5.5 2H12L16 6V16.5C16 16.9167 15.854 17.2707 15.562 17.562C15.2707 17.854 14.9167 18 14.5 18H5.5ZM11 7V3.5H5.5V16.5H14.5V7H11ZM5.5 3.5V7.438V3.5V16.5V3.5Z" />
            </svg>
        `
        : '';
    const folderIcon = !isIconsHidden
        ? `
            <svg class="tds-icon" viewBox='0 0 20 20' preserveAspectRatio="xMidYMid meet">
                <path d="M3.54809 17.0834C2.95527 17.0834 2.45184 16.8764 2.03778 16.4623C1.6237 16.0482 1.41666 15.5448 1.41666 14.952V5.2437C1.41666 4.65089 1.62369 4.14746 2.03776 3.73341C2.45182 3.31934 2.95525 3.1123 3.54807 3.1123H8.02884L9.99999 5.08343H16.4519C17.0447 5.08343 17.5481 5.29046 17.9622 5.70453C18.3763 6.11859 18.5833 6.62203 18.5833 7.21485V14.952C18.5833 15.5448 18.3763 16.0482 17.9622 16.4623C17.5481 16.8764 17.0447 17.0834 16.4519 17.0834H3.54809ZM3.29166 5.2437V14.952C3.29166 15.0268 3.3157 15.0882 3.36378 15.1363C3.41187 15.1844 3.4733 15.2084 3.54809 15.2084H16.4519C16.5267 15.2084 16.5881 15.1844 16.6362 15.1363C16.6843 15.0882 16.7083 15.0268 16.7083 14.952V7.21485C16.7083 7.14005 16.6843 7.07862 16.6362 7.03053C16.5881 6.98245 16.5267 6.95841 16.4519 6.95841H9.21795L7.24682 4.98728H3.54809C3.4733 4.98728 3.41187 5.01133 3.36378 5.05941C3.3157 5.10748 3.29166 5.16891 3.29166 5.2437ZM3.29166 5.2437V4.98728V15.2084V5.2437Z"/>
            </svg>
        `
        : '';

    const linkIcon = !isIconsHidden
        ? `
        <svg class="tds-icon" viewBox='0 0 20 20' preserveAspectRatio="xMidYMid meet">
            <path d="M8.92523 14.1694H5.99996C4.84643 14.1694 3.86316 13.7624 3.05013 12.9485C2.23709 12.1347 1.83057 11.1504 1.83057 9.99563C1.83057 8.84091 2.23709 7.85805 3.05013 7.04707C3.86316 6.23607 4.84643 5.83057 5.99996 5.83057H8.92523V7.55975H6.00209C5.32366 7.55975 4.747 7.797 4.27211 8.27148C3.79721 8.74597 3.55975 9.32213 3.55975 9.99996C3.55975 10.6778 3.79721 11.254 4.27211 11.7284C4.747 12.2029 5.32366 12.4402 6.00209 12.4402H8.92523V14.1694ZM6.88538 10.7898V9.21011H13.1145V10.7898H6.88538ZM11.0747 14.1694V12.4402H13.9978C14.6763 12.4402 15.2529 12.2029 15.7278 11.7284C16.2027 11.254 16.4402 10.6778 16.4402 9.99996C16.4402 9.32213 16.2027 8.74597 15.7278 8.27148C15.2529 7.797 14.6763 7.55975 13.9978 7.55975H11.0747V5.83057H14C15.1535 5.83057 16.1368 6.2375 16.9498 7.05138C17.7628 7.86525 18.1694 8.84956 18.1694 10.0043C18.1694 11.159 17.7628 12.1419 16.9498 12.9529C16.1368 13.7639 15.1535 14.1694 14 14.1694H11.0747Z" />
        </svg>
    `
        : '';

    let icon = '';
    if (item.emoji && !isIconsHidden) {
        icon = `
            <div class="tds-emoji">
                <div class="tds-emoji__wrapper">${item.emoji}</div>
            </div>
        `;
    } else {
        icon = item.isfolder ? folderIcon : item.islink ? linkIcon : docIcon;
    }

    return `
        <li class="${itemClassName}">
            <${item.isfolder ? 'div' : 'a'}
                class="tds-panel__link"
                ${item.isfolder ? '' : `href=${linkHref}`}
                ${item.islink ? 'target="_blank"' : ''}
                data-uuid="${item.uuid}"
                ${item.isfolder ? 'data-is-folder="true"' : ''}
                ${item.islink ? 'data-is-link="true"' : ''}
                ${item.islink ? 'rel="noopener noreferrer"' : ''}
            >
                <button
                    class="tds-btn ${expandBtnClassName}"
                    aria-label="${isExpanded ? 'Collapse' : 'Expand'}"
                    aria-expanded="${isExpanded}"
                >
                    <svg class="tds-icon" viewBox='0 0 20 20' preserveAspectRatio="xMidYMid meet">
                        <path d="M10 12.979 5.125 8.104l1-1L10 10.979l3.875-3.875 1 1Z"/>
                    </svg>
                </button>

                ${icon}

                <span class="tds-panel__link-title">
                    ${item.title.replace(/&/g, '&amp;')}
                </span>
            </${item.isfolder ? 'div' : 'a'}>
            ${docSubListHtml}
        </li>
    `;
}

// TO DO: Убрать эту функцию в будущем, оставлена для совместимости со старыми документами
function tds_drawContentHeader() {
    if (window.tds.contentWrapper.querySelector('.tds-content__header-wrapper')) {
        tds_setCover();
    } else {
        const docHeader = document.querySelector('.tds-content h1');
        const headerWrapper = document.createElement('div');
        headerWrapper.classList.add('tds-content__header-wrapper');
        const headerGradient = document.createElement('div');
        headerGradient.classList.add('tds-content__header-gradient');
        headerWrapper.append(headerGradient, docHeader);
        window.tds.contentContainer.insertAdjacentElement('afterbegin', headerWrapper);
        tds_setCover();
    }
}

function tds_drawBreadcrumbs() {
    const docPath = tds_getActiveDocPath().reverse();
    if (
        window.tds.homepage &&
        docPath[0] !== window.tds.homepage &&
        !window.tds.projectSettings.isbreadcrumbshomepagelinkhidden
    ) {
        docPath.unshift(window.tds.homepage);
    }
    let breadcrumbsHtml = '';
    if (docPath.length > 1) {
        breadcrumbsHtml += `
            <nav class="tds-breadcrumbs">
                <ul class="tds-breadcrumbs__list"
                    itemscope
                    itemtype="https://schema.org/BreadcrumbList"
                    aria-label="${tds_translate('breadcrumbs')}"
                >
        `;
        const currentURL = new URL(window.location);
        const tdocsPath = currentURL.protocol + '//' + currentURL.hostname + '/tdocs/';
        const isIconsHidden = window.tds.projectSettings.isdocsiconshidden;
        const docIcon = !isIconsHidden
            ? `
                <svg class="tds-icon" viewBox='0 0 20 20' preserveAspectRatio="xMidYMid meet">
                    <path d="M7 15H13V13.5H7V15ZM7 12H13V10.5H7V12ZM5.5 18C5.08333 18 4.72933 17.854 4.438 17.562C4.146 17.2707 4 16.9167 4 16.5V3.5C4 3.08333 4.146 2.72933 4.438 2.438C4.72933 2.146 5.08333 2 5.5 2H12L16 6V16.5C16 16.9167 15.854 17.2707 15.562 17.562C15.2707 17.854 14.9167 18 14.5 18H5.5ZM11 7V3.5H5.5V16.5H14.5V7H11ZM5.5 3.5V7.438V3.5V16.5V3.5Z" />
                </svg>
            `
            : '';
        const folderIcon = !isIconsHidden
            ? `
                <svg class="tds-icon" viewBox='0 0 20 20' preserveAspectRatio="xMidYMid meet">
                    <path d="M3.54809 17.0834C2.95527 17.0834 2.45184 16.8764 2.03778 16.4623C1.6237 16.0482 1.41666 15.5448 1.41666 14.952V5.2437C1.41666 4.65089 1.62369 4.14746 2.03776 3.73341C2.45182 3.31934 2.95525 3.1123 3.54807 3.1123H8.02884L9.99999 5.08343H16.4519C17.0447 5.08343 17.5481 5.29046 17.9622 5.70453C18.3763 6.11859 18.5833 6.62203 18.5833 7.21485V14.952C18.5833 15.5448 18.3763 16.0482 17.9622 16.4623C17.5481 16.8764 17.0447 17.0834 16.4519 17.0834H3.54809ZM3.29166 5.2437V14.952C3.29166 15.0268 3.3157 15.0882 3.36378 15.1363C3.41187 15.1844 3.4733 15.2084 3.54809 15.2084H16.4519C16.5267 15.2084 16.5881 15.1844 16.6362 15.1363C16.6843 15.0882 16.7083 15.0268 16.7083 14.952V7.21485C16.7083 7.14005 16.6843 7.07862 16.6362 7.03053C16.5881 6.98245 16.5267 6.95841 16.4519 6.95841H9.21795L7.24682 4.98728H3.54809C3.4733 4.98728 3.41187 5.01133 3.36378 5.05941C3.3157 5.10748 3.29166 5.16891 3.29166 5.2437ZM3.29166 5.2437V4.98728V15.2084V5.2437Z"/>
                </svg>
            `
            : '';
        const homePageIcon = !isIconsHidden
            ? `
                <svg class="tds-icon" viewBox='0 0 20 20' preserveAspectRatio="xMidYMid meet">
                    <path d="M5.54167 15.5001H7.30931V10.2774H12.6907V15.5001H14.4583V8.29178L10 4.94242L5.54167 8.29178V15.5001ZM3.91669 17.1251V7.4793L10 2.92163L16.0833 7.4793V17.1251H11.0657V11.9023H8.93429V17.1251H3.91669Z" />
                </svg>
            `
            : '';

        const linkIcon = !isIconsHidden
            ? `
                <svg class="tds-icon" viewBox='0 0 20 20' preserveAspectRatio="xMidYMid meet">
                    <path d="M8.92523 14.1694H5.99996C4.84643 14.1694 3.86316 13.7624 3.05013 12.9485C2.23709 12.1347 1.83057 11.1504 1.83057 9.99563C1.83057 8.84091 2.23709 7.85805 3.05013 7.04707C3.86316 6.23607 4.84643 5.83057 5.99996 5.83057H8.92523V7.55975H6.00209C5.32366 7.55975 4.747 7.797 4.27211 8.27148C3.79721 8.74597 3.55975 9.32213 3.55975 9.99996C3.55975 10.6778 3.79721 11.254 4.27211 11.7284C4.747 12.2029 5.32366 12.4402 6.00209 12.4402H8.92523V14.1694ZM6.88538 10.7898V9.21011H13.1145V10.7898H6.88538ZM11.0747 14.1694V12.4402H13.9978C14.6763 12.4402 15.2529 12.2029 15.7278 11.7284C16.2027 11.254 16.4402 10.6778 16.4402 9.99996C16.4402 9.32213 16.2027 8.74597 15.7278 8.27148C15.2529 7.797 14.6763 7.55975 13.9978 7.55975H11.0747V5.83057H14C15.1535 5.83057 16.1368 6.2375 16.9498 7.05138C17.7628 7.86525 18.1694 8.84956 18.1694 10.0043C18.1694 11.159 17.7628 12.1419 16.9498 12.9529C16.1368 13.7639 15.1535 14.1694 14 14.1694H11.0747Z" />
                </svg>
            `
            : '';

        breadcrumbsHtml += docPath
            .map((doc, index) => {
                let linkHref = tdocsPath;
                if (!doc.ishomepage) {
                    linkHref += doc.fullPath;
                }
                if (doc.islink) linkHref = doc.linkurl;
                let itemClassName = 'tds-breadcrumbs__item';
                if (index === docPath.length - 1) itemClassName += ' tds-breadcrumbs__item_active';
                if (doc.ishomepage) itemClassName += ' tds-breadcrumbs__item_home';

                let icon = '';
                if (doc.emoji && !isIconsHidden) {
                    icon = `
                        <div class="tds-emoji">
                            <div class="tds-emoji__wrapper">${doc.emoji}</div>
                        </div>
                    `;
                } else {
                    icon = doc.isfolder ? folderIcon : doc.ishomepage ? homePageIcon : doc.islink ? linkIcon : docIcon;
                }
                return `
                    <li class="${itemClassName}" itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem">
                        <${doc.isfolder ? 'div' : 'a'}
                            class="tds-breadcrumbs__link"
                            ${
                                doc.isfolder
                                    ? 'data-is-folder="true"'
                                    : `href="${linkHref}" itemprop="item" title="${doc.title.replace(/&/g, '&amp;')}"`
                            }
                            ${doc.islink ? 'data-is-link="true" target="_blank"' : ''}
                            data-uuid="${doc.uuid}"
                        >
                            ${icon}
                            <span
                                class="tds-breadcrumbs__title ${
                                    doc.ishomepage && !isIconsHidden ? 'tds-breadcrumbs__title_home' : ''
                                }"
                                itemprop="name"
                            >
                                ${doc.title.replace(/&/g, '&amp;')}
                            </span>
                        </${doc.isfolder ? 'div' : 'a'}>
                        <meta itemprop="position" content="${index}">
                    </li>
                `;
            })
            .join('');
        breadcrumbsHtml += '</nav></ul>';
    }

    window.tds.contentWrapper.insertAdjacentHTML('afterbegin', breadcrumbsHtml);
    const breadcrumbs = window.tds.contentWrapper.querySelector('.tds-breadcrumbs');
    if (breadcrumbs) breadcrumbs.scroll(breadcrumbs.scrollWidth, 0);
    tds_setBreadcrumbsHandlers();
}

function tds_drawHeadersButtons() {
    if (typeof navigator.clipboard !== 'object') return;

    const headers = document.querySelectorAll('.tds-content h2');
    headers.forEach(header => {
        const span = document.createElement('span');
        span.innerHTML = header.innerHTML;
        header.innerHTML = '';
        header.appendChild(span);
        const linkButton = document.createElement('button');
        linkButton.classList.add('tds-content__header-btn');
        linkButton.ariaLabel = tds_translate('copy_link');
        linkButton.title = tds_translate('copy_link');
        linkButton.innerHTML = `
            <svg class="tds-icon" viewBox='0 0 25 25' preserveAspectRatio="xMidYMid meet">
                <path d="M11.3648 17.7032H7.29157C5.79202 17.7032 4.51379 17.1959 3.45689 16.1813C2.39996 15.1668 1.87149 13.9398 1.87149 12.5004C1.87149 11.0609 2.39996 9.83378 3.45689 8.81893C4.51379 7.80407 5.79202 7.29663 7.29157 7.29663H11.3648V9.57166H7.29423C6.44619 9.57166 5.72537 9.85635 5.13175 10.4257C4.53813 10.9951 4.24131 11.6865 4.24131 12.4999C4.24131 13.3133 4.53813 14.0047 5.13175 14.5741C5.72537 15.1435 6.44619 15.4281 7.29423 15.4281H11.3648V17.7032ZM8.19001 13.5477V11.4521H16.8098V13.5477H8.19001ZM13.635 17.7032V15.4281H17.7056C18.5536 15.4281 19.2745 15.1435 19.868 14.5741C20.4617 14.0047 20.7585 13.3133 20.7585 12.4999C20.7585 11.6865 20.4617 10.9951 19.868 10.4257C19.2745 9.85635 18.5536 9.57166 17.7056 9.57166H13.635V7.29663H17.7082C19.2078 7.29663 20.486 7.80391 21.5429 8.81846C22.5999 9.83301 23.1283 11.06 23.1283 12.4994C23.1283 13.9389 22.5999 15.166 21.5429 16.1809C20.486 17.1957 19.2078 17.7032 17.7082 17.7032H13.635Z"/>
            </svg>
        `;
        header.appendChild(linkButton);
    });
}

function tds_getActiveDocPath() {
    if (!window.uuid) return [];
    const activeDoc = window.tds.tree.find(doc => doc.uuid === window.uuid);
    if (!activeDoc) return [];
    const activeDocPath = [activeDoc];
    let parentDoc = window.tds.tree.find(doc => doc.uuid === activeDoc.parentUuid);
    while (parentDoc) {
        activeDocPath.push(parentDoc);
        parentDoc = window.tds.tree.find(doc => doc.uuid === parentDoc.parentUuid);
    }
    return activeDocPath;
}

function tds_expandItem(item) {
    let currentItem = item;
    do {
        currentItem.classList.add('tds-panel__item_expanded');
        const expandBtn = currentItem.querySelector('.tds-panel__expand-btn');
        expandBtn.setAttribute('aria-label', 'Collapse');
        expandBtn.setAttribute('aria-expanded', 'true');
        currentItem = currentItem.parentElement.closest('.tds-panel__item');
    } while (currentItem);
}

function tds_setHandlers() {
    const expandBtns = document.querySelectorAll('.tds-panel__expand-btn:not(.tds-panel__expand-btn_hidden)');
    const itemLinks = document.querySelectorAll('.tds-panel__link');
    const burgerBtn = document.querySelector('.tds-panel__burger');
    const searchBtn = document.querySelector('.tds-panel__search');
    const closeSearchBtn = document.querySelector('.tds-search__close-btn');
    const searchInput = document.querySelector('.tds-search__input');
    const panelTitle = document.querySelector('.tds-panel__title');

    expandBtns.forEach(expandBtn => {
        expandBtn.addEventListener('click', tds_toggleItem);
    });

    itemLinks.forEach(itemLink => {
        itemLink.addEventListener('click', tds_handleLinkClick);
    });

    burgerBtn.addEventListener('click', tds_toggelPanel);

    document.addEventListener('click', event => {
        const isMobile = window.matchMedia('(max-width: 1023px)').matches;
        if (!isMobile) return;
        const isPanel = event.target.closest('.tds-panel');
        if (!isPanel) tds_closePanel();
    });

    window.addEventListener('popstate', tds_handlePopstate);

    searchBtn.addEventListener('click', tds_openSearch);

    closeSearchBtn.addEventListener('click', tds_closeSearch);

    document.addEventListener('keydown', event => {
        if (event.key !== 'Escape' && event.keyCode !== 27) return;
        tds_closeSearch();
    });

    const tds_handleSearchInput = tds_HandleSearchInput(searchInput);
    searchInput.addEventListener('input', tds_throttle(tds_handleSearchInput, 700));

    panelTitle.addEventListener('click', tds_handleLinkClick);

    window.tds.contentWrapper.addEventListener('scroll', tds_updateHnavPosition);
    window.addEventListener('resize', tds_updateHnavPosition);
    document.addEventListener('click', tds_closeHnavPanel);
}

function tds_setContentHandlers() {
    const contentLinks = document.querySelectorAll('.tds-content a[href], .tds-sibling a[href]');
    contentLinks.forEach(link => {
        link.addEventListener('click', tds_handleLinkClick);
    });

    const headerButtons = document.querySelectorAll('.tds-content .tds-content__header-btn');
    headerButtons.forEach(btn => {
        btn.addEventListener('click', async () => {
            const header = btn.parentElement;
            const prevSibling = header.previousElementSibling;
            const customAnchor =
                prevSibling &&
                prevSibling.classList.contains('t-redactor__anchor') &&
                prevSibling.getAttribute('data-id');
            const hash = '#' + customAnchor || header.getAttribute('data-id');
            const link = window.location.origin + window.location.pathname + hash;

            const setIcon = iconHtml => {
                const oldTimeoutId = btn.getAttribute('data-timeout');
                if (oldTimeoutId) {
                    window.clearTimeout(oldTimeoutId);
                    btn.removeAttribute('data-timeout');
                }

                const oldIcon = btn.firstElementChild;
                if (btn.lastElementChild !== oldIcon) {
                    btn.lastElementChild.remove();
                }
                oldIcon.style.display = 'none';
                btn.insertAdjacentHTML('beforeend', iconHtml);
                const timeoutId = window.setTimeout(() => {
                    oldIcon.removeAttribute('style');
                    btn.lastElementChild.remove();
                    btn.removeAttribute('data-timeout');
                }, 3000);
                btn.setAttribute('data-timeout', timeoutId);
            };

            try {
                btn.disabled = true;
                await navigator.clipboard.writeText(link);
                btn.disabled = false;
                const okIconHtml = `
                    <svg class="tds-icon" viewBox="0 0 25 25" preserveAspectRatio="xMidYMid meet">
                        <path d="M9.94791 18.9494L3.81114 12.8126L5.50101 11.1227L9.94791 15.5696L19.499 6.01855L21.1888 7.70842L9.94791 18.9494Z"/>
                    </svg>
                `;
                setIcon(okIconHtml);
            } catch (error) {
                btn.disabled = false;
                const errorIconHtml = `
                    <svg class="tds-icon" viewBox="0 0 25 25" preserveAspectRatio="xMidYMid meet">
                        <path d="M6.66667 19.9909L5.00906 18.3333L10.8424 12.5L5.00906 6.66664L6.66667 5.00903L12.5 10.8424L18.3333 5.00903L19.9909 6.66664L14.1576 12.5L19.9909 18.3333L18.3333 19.9909L12.5 14.1576L6.66667 19.9909Z"/>
                    </svg>
                `;
                setIcon(errorIconHtml);
            }
        });
    });
}

function tds_setBreadcrumbsHandlers() {
    const breadcrumbsLinks = document.querySelectorAll('.tds-breadcrumbs .tds-breadcrumbs__link');
    breadcrumbsLinks.forEach(link => {
        link.addEventListener('click', tds_handleLinkClick);
    });
}

function tds_toggleItem() {
    if (window.getSelection) {
        if (window.getSelection().empty) {
            window.getSelection().empty();
        } else if (window.getSelection().removeAllRanges) {
            window.getSelection().removeAllRanges();
        }
    } else if (document.selection) {
        document.selection.empty();
    }
    const isExpanded = this.getAttribute('aria-expanded') === 'true';
    this.setAttribute('aria-label', isExpanded ? 'Expand' : 'Collapse');
    this.setAttribute('aria-expanded', isExpanded ? 'false' : 'true');
    const parentItem = this.closest('.tds-panel__item');
    parentItem.classList.toggle('tds-panel__item_expanded');
}

function tds_handleLinkClick(event) {
    if (this.getAttribute('data-is-link') === 'true') return;

    if (
        event.target.closest('.tds-panel__expand-btn:not(.tds-panel__expand-btn_hidden)') ||
        this.matches('.tds-panel__item_active > .tds-panel__link') ||
        this.matches('.tds-breadcrumbs__item_active > .tds-breadcrumbs__link') ||
        this.getAttribute('data-is-folder') === 'true'
    ) {
        event.preventDefault();
        if (this.getAttribute('data-is-folder') === 'true') {
            if (!this.matches('.tds-breadcrumbs__link') && !event.target.closest('.tds-panel__expand-btn')) {
                tds_toggleItem.call(this.firstElementChild);
            }
        }
        return;
    }

    const href = this.href;
    if (!href) return;

    const currentOrigin = window.location.origin;
    try {
        const url = new URL(href, currentOrigin);
        let uuid = /[^-]+$/.exec(url.pathname)[0];
        const doc = uuid === '/tdocs/' ? window.tds.homepage : window.tds.tree.find(doc => doc.uuid === uuid);
        uuid = doc && doc.uuid;
        if (url.origin === currentOrigin && url.pathname.startsWith('/tdocs/') && uuid && doc) {
            event.preventDefault();
            if (window.uuid === uuid) {
                const hash = url.hash;
                if (hash) {
                    window.location.hash = hash;
                    const hashValue = window.location.hash.substring(1);
                    const anchor =
                        document.querySelector(`[data-id="${hashValue}"]`) ||
                        document.querySelector(`.t-redactor__anchor[data-id="${hashValue}"]`);
                    if (anchor) {
                        tds_scrollIntoView(anchor, 10);
                    }
                }
            } else {
                if (window.tds.isDocOpening) return;

                window.uuid = uuid;
                document.title = doc.seoTitle || doc.title;
                history.pushState(null, null, href);
                tds_openDoc();
            }
        }
    } catch (error) {
        //Nothing to do, invalid link
    }
}

function tds_closeDoc() {
    tds_removePreloader();
    window.tds.contentContainer.innerHTML = '';
    window.tds.contentWrapper.scrollTop = 0;

    const activeItem = document.querySelector('.tds-panel__item_active');
    if (activeItem) activeItem.classList.remove('tds-panel__item_active');

    if (window.tds.scrollHandler) {
        window.tds.contentWrapper.removeEventListener('scroll', window.tds.scrollHandler);
        window.tds.scrollHandler = null;
    }
    window.tds.docHeaders = null;

    const breadcrumbs = window.tds.contentWrapper.querySelector('.tds-breadcrumbs');
    if (breadcrumbs) breadcrumbs.remove();

    const sibling = window.tds.contentWrapper.querySelector('.tds-sibling');
    if (sibling) sibling.remove();
}

function tds_openDoc() {
    if (window.tds.isDocOpening) return;
    window.tds.isDocOpening = true;
    tds_closeDoc();
    const uuid = window.uuid;
    const contentContainer = window.tds.contentContainer;
    const linkElement = document.querySelector(`.tds-panel__list [data-uuid="${uuid}"]`);
    if (linkElement) {
        const itemElement = linkElement.closest('.tds-panel__item');
        tds_expandItem(itemElement);
        itemElement.classList.add('tds-panel__item_active');
    }
    if (window.matchMedia('(max-width: 1023px)').matches) tds_closePanel();
    const key = 'tilda_docs_' + window.projectid + '_' + uuid;
    const savedContent = window.sessionStorage.getItem(key);
    if (savedContent) {
        contentContainer.insertAdjacentHTML('beforeend', savedContent);
        tds_openDocActions();
        window.tds.isDocOpening = false;
        return;
    }
    tds_drawDocPreloader();
    const fetchId = tds_getUniqueID();
    window.tds.fentchingDocs.push(fetchId);
    tds_getDoc(uuid).then(response => {
        if (!response.isOk) {
            const fetchIndex = window.tds.fentchingDocs.indexOf(fetchId);
            if (window.tds.fentchingDocs.indexOf(fetchId) === window.tds.fentchingDocs.length - 1) {
                tds_drawDocError();
            }

            window.tds.fentchingDocs.splice(fetchIndex, 1);
            window.tds.isDocOpening = false;
            return;
        }

        if (!response.data.success) {
            if (response.data.error === 'membersclosed') {
                const doc = window.tds.tree.find(doc => doc.uuid === uuid);
                const currentURL = new URL(window.location);
                const currentHostName = currentURL.protocol + '//' + currentURL.hostname;
                const docLink = currentURL.hostname + '/tdocs/' + doc.fullPath;
                const returnLink = '?redirecturl=' + docLink;
                const loginLink = currentHostName + '/members/login' + returnLink;
                const storageKey = 'tilda_members_profile' + window.projectid;
                const storageRecString = localStorage.getItem(storageKey);
                if (!storageRecString) {
                    window.location.replace(loginLink);
                }
                const storageRec = JSON.parse(storageRecString);
                const loginToken = storageRec.token;

                if (!window.tildaMembers) window.tildaMembers = new Object();

                tds_getMembersPage(loginToken, currentURL.protocol + '//' + docLink, doc.id).then(response => {
                    if (!response.isOk) {
                        const fetchIndex = window.tds.fentchingDocs.indexOf(fetchId);
                        if (window.tds.fentchingDocs.indexOf(fetchId) === window.tds.fentchingDocs.length - 1) {
                            window.location.replace(loginLink);
                        }
                        window.tds.fentchingDocs.splice(fetchIndex, 1);
                        window.tds.isDocOpening = false;
                        return;
                    }

                    tds_removePreloader();
                    window.tds.contentDocument.open();
                    window.tds.contentDocument.write(response.data.data.html);
                    window.tds.contentDocument.close();
                    const contentHtml = window.tds.contentDocument.querySelector('.tds-content').innerHTML;
                    const key = 'tilda_docs_' + window.projectid + '_' + uuid;
                    window.sessionStorage.setItem(key, contentHtml);
                    const fetchIndex = window.tds.fentchingDocs.indexOf(fetchId);
                    if (window.tds.fentchingDocs.indexOf(fetchId) === window.tds.fentchingDocs.length - 1) {
                        contentContainer.insertAdjacentHTML('beforeend', contentHtml);
                        const newBodyScripts = window.tds.contentDocument.querySelectorAll('body script');
                        const oldBodyScripts = document.querySelectorAll('body script');
                        oldBodyScripts.forEach(script => script.remove());
                        newBodyScripts.forEach(script => {
                            const newScript = document.createElement('script');
                            newScript.innerHTML = script.innerHTML;
                            document.body.appendChild(newScript);
                        });
                        const newHeadScripts =
                            window.tds.contentDocument.head.querySelectorAll('script[src*="members"]');
                        const oldHeadScripts = document.head.querySelectorAll('script[src*="members"]');
                        oldHeadScripts.forEach(script => script.remove());
                        window.tds.headScriptsCount = newHeadScripts.length;
                        window.tds.headScriptsLoaded = 0;
                        newHeadScripts.forEach(script => {
                            const newScript = document.createElement('script');
                            newScript.onload = tds_handleHeadScriptLoad;
                            newScript.src = script.src;
                            document.head.appendChild(newScript);
                        });
                        const newHeadLinks = window.tds.contentDocument.head.querySelectorAll('link[href*="members"]');
                        const oldHeadLinks = document.head.querySelectorAll('link[href*="members"]');
                        oldHeadLinks.forEach(link => link.remove());
                        newHeadLinks.forEach(link => document.head.appendChild(link));
                        let tlkFontStyle = document.getElementById('tlk-font-style');
                        if (!tlkFontStyle) {
                            tlkFontStyle = window.tds.contentDocument.getElementById('tlk-font-style');
                            if (tlkFontStyle) document.head.appendChild(tlkFontStyle);
                        }
                        tds_openDocActions();
                    }
                    window.tds.fentchingDocs.splice(fetchIndex, 1);
                    window.tds.isDocOpening = false;
                });
            } else {
                const fetchIndex = window.tds.fentchingDocs.indexOf(fetchId);
                if (window.tds.fentchingDocs.indexOf(fetchId) === window.tds.fentchingDocs.length - 1) {
                    tds_drawDocError();
                }
                window.tds.fentchingDocs.splice(fetchIndex, 1);
                window.tds.isDocOpening = false;
            }
        } else {
            const key = 'tilda_docs_' + window.projectid + '_' + uuid;
            window.sessionStorage.setItem(key, response.data.data);
            const fetchIndex = window.tds.fentchingDocs.indexOf(fetchId);
            if (window.tds.fentchingDocs.indexOf(fetchId) === window.tds.fentchingDocs.length - 1) {
                tds_removePreloader();
                contentContainer.insertAdjacentHTML('beforeend', response.data.data);
                tds_openDocActions();
            }
            window.tds.fentchingDocs.splice(fetchIndex, 1);
            window.tds.isDocOpening = false;
        }
    });
}

function tds_handlePopstate() {
    const uuid = /[^-]+$/.exec(window.location.pathname)[0];
    if (uuid === window.uuid) {
        if (window.location.hash) {
            const hash = window.location.hash.substring(1);
            const anchor =
                document.querySelector(`.tds-content h2[data-id="${hash}"]`) ||
                document.querySelector(`.t-redactor__anchor[data-id="${hash}"]`);
            if (anchor) tds_scrollIntoView(anchor, 9);
        } else {
            window.tds.contentWrapper.scrollTo({
                top: 0,
                behavior: 'smooth',
            });
        }
        return;
    }
    if (window.tds.isDocOpening) return;
    window.uuid = uuid;
    tds_openDoc();
}

function tds_toggelPanel() {
    const panel = document.querySelector('.tds-panel');
    panel.classList.toggle('tds-panel_hidden');
}

function tds_closePanel() {
    const panel = document.querySelector('.tds-panel');
    panel.classList.add('tds-panel_hidden');
}

function tds_openSearch() {
    window.tds.panelContainer.classList.add('tds-panel__inner_search');
    const searchInput = document.querySelector('.tds-search__input');
    window.setTimeout(() => searchInput.focus(), 300);
}

function tds_closeSearch() {
    window.tds.panelContainer.classList.remove('tds-panel__inner_search');
    const searchInput = document.querySelector('.tds-search__input');
    const searchResultContainer = document.querySelector('.tds-search__result-container');
    window.setTimeout(() => {
        searchInput.value = '';
        searchResultContainer.innerHTML = '';
    }, 300);
}

function tds_debounce(callback, wait) {
    let timeoutId = null;
    const debounced = (...args) => {
        window.clearTimeout(timeoutId);
        timeoutId = window.setTimeout(() => {
            callback.apply(null, args);
        }, wait);
    };

    return debounced;
}

function tds_throttle(callback, wait) {
    let timeoutId = null;

    const throttled = (...args) => {
        if (timeoutId) return;
        timeoutId = window.setTimeout(() => {
            callback.apply(null, args);
            window.clearTimeout(timeoutId);
            timeoutId = null;
        }, wait);
    };

    return throttled;
}

function tds_sendSearchRequest(query, page) {
    const URL = '/tdocs/search/';
    const num = 10;
    const body = {query, page, num};
    return tds_fetch(URL, 'POST', body);
}

function tds_HandleSearchInput(searchInput) {
    const searchResultContainer = document.querySelector('.tds-search__result-container');
    return function () {
        const query = searchInput.value;

        let searchResultHtml = `
            <span class="tds-search__result-msg tds-search__result-msg_busy">
                <svg class="tds-icon" viewBox='0 0 20 20' preserveAspectRatio='xMidYMid meet'>
                    <path d="M6.82301 17.531C7.81567 17.955 8.87467 18.167 10 18.167C11.1253 18.167 12.1843 17.955 13.177 17.531C14.1703 17.1077 15.0383 16.5243 15.781 15.781C16.5243 15.0383 17.1077 14.1703 17.531 13.177C17.955 12.1843 18.167 11.1253 18.167 9.99999C18.167 8.87466 17.955 7.81566 17.531 6.82299C17.1077 5.82966 16.5243 4.96166 15.781 4.21899L14.562 5.43799C15.8127 6.68733 16.438 8.20799 16.438 9.99999C16.438 11.792 15.8127 13.3127 14.562 14.562C13.3127 15.8127 11.792 16.438 10 16.438C8.20801 16.438 6.68734 15.8127 5.43801 14.562C4.18734 13.3127 3.56201 11.792 3.56201 9.99999C3.56201 8.20799 4.18734 6.68733 5.43801 5.43799L4.21901 4.21899C3.47567 4.96166 2.89234 5.82633 2.46901 6.81299C2.04501 7.79899 1.83301 8.86133 1.83301 9.99999C1.83301 11.1253 2.04501 12.1843 2.46901 13.177C2.89234 14.1703 3.47567 15.0383 4.21901 15.781C4.96167 16.5243 5.82967 17.1077 6.82301 17.531Z"/>
                </svg>
                ${tds_translate('searching')}...
            </span>
        `;
        searchResultContainer.innerHTML = '';

        if (!query.length) return;

        if (query.length < 3) {
            searchResultHtml = `
                <span class="tds-search__result-msg">
                    ${tds_translate('search_type')}
                </span>
            `;
            searchResultContainer.insertAdjacentHTML('beforeend', searchResultHtml);
            return;
        }

        searchResultContainer.innerHTML = '';
        searchResultContainer.insertAdjacentHTML('beforeend', searchResultHtml);
        tds_sendSearchRequest(query, 1).then(result => {
            searchResultContainer.innerHTML = '';
            if (!result.isOk || !result.data?.success) {
                searchResultHtml = `
                    <span class="tds-search__result-msg">
                        ${tds_translate('search_error')}
                    </span>
                `;
                searchResultContainer.insertAdjacentHTML('beforeend', searchResultHtml);
                return;
            }

            if (!result.data.total) {
                searchResultHtml = `
                    <span class="tds-search__result-msg">
                        ${tds_translate('search_no_result')}
                    </span>
                `;
                searchResultContainer.insertAdjacentHTML('beforeend', searchResultHtml);
                return;
            }
            searchResultHtml = `
                <ul class="tds-search__result-list">
                    ${tds_getSearchResultItemsHtml(result.data.pages)}
                </ul>
            `;
            searchResultContainer.insertAdjacentHTML('beforeend', searchResultHtml);
            tds_setSearchResultHandlers();

            if (result.data.pagin > 1) {
                const moreResultsBtnHtml = `
                    <button class="tds-btn tds-search__more-results-btn">
                        +&nbsp;${tds_translate('search_load')}
                    </button>
                `;
                searchResultContainer.insertAdjacentHTML('beforeend', moreResultsBtnHtml);
                const moreResultsBtn = document.querySelector('.tds-search__more-results-btn');
                const tds_loadMoreSearchResults = tds_LoadMoreSearchResults(query);
                moreResultsBtn.addEventListener('click', tds_loadMoreSearchResults);
            }
        });
    };
}

function tds_getSearchResultItemsHtml(searchResultList) {
    let searchResultHtml = '';
    searchResultHtml += searchResultList
        .map(searchResultItem => {
            const uuid = /([^-/]+)\/?$/.exec(searchResultItem.url)[1];
            return `
                <li class="tds-search__result-item">
                    <a href="${searchResultItem.url}" class="tds-search__result-link" data-uuid="${uuid}">
                        <span class="tds-search__result-title">${searchResultItem.title.replace(/&/g, '&amp;')}</span>
                        <span class="tds-search__result-body">${searchResultItem.body.replace(/&/g, '&amp;')}</span>
                    </a>
                </li>
            `;
        })
        .join('');
    return searchResultHtml;
}

function tds_LoadMoreSearchResults(query) {
    let nextPage = 2;
    const searchResultList = document.querySelector('.tds-search__result-list');
    return function () {
        const moreResultsBtn = this;
        let searchMessageHtml = `
            <span class="tds-search__result-msg tds-search__result-msg_busy">
                <svg class="tds-icon" viewBox='0 0 20 20' preserveAspectRatio='xMidYMid meet'>
                    <path d="M6.82301 17.531C7.81567 17.955 8.87467 18.167 10 18.167C11.1253 18.167 12.1843 17.955 13.177 17.531C14.1703 17.1077 15.0383 16.5243 15.781 15.781C16.5243 15.0383 17.1077 14.1703 17.531 13.177C17.955 12.1843 18.167 11.1253 18.167 9.99999C18.167 8.87466 17.955 7.81566 17.531 6.82299C17.1077 5.82966 16.5243 4.96166 15.781 4.21899L14.562 5.43799C15.8127 6.68733 16.438 8.20799 16.438 9.99999C16.438 11.792 15.8127 13.3127 14.562 14.562C13.3127 15.8127 11.792 16.438 10 16.438C8.20801 16.438 6.68734 15.8127 5.43801 14.562C4.18734 13.3127 3.56201 11.792 3.56201 9.99999C3.56201 8.20799 4.18734 6.68733 5.43801 5.43799L4.21901 4.21899C3.47567 4.96166 2.89234 5.82633 2.46901 6.81299C2.04501 7.79899 1.83301 8.86133 1.83301 9.99999C1.83301 11.1253 2.04501 12.1843 2.46901 13.177C2.89234 14.1703 3.47567 15.0383 4.21901 15.781C4.96167 16.5243 5.82967 17.1077 6.82301 17.531Z"/>
                </svg>
                ${tds_translate('searching')}...
            </span>
        `;
        moreResultsBtn.insertAdjacentHTML('beforebegin', searchMessageHtml);
        moreResultsBtn.style.display = 'none';
        tds_sendSearchRequest(query, nextPage).then(result => {
            const searchMessage = document.querySelector('.tds-search__result-msg');
            searchMessage.remove();
            moreResultsBtn.removeAttribute('style');
            if (!result.isOk || !result.data?.success) {
                searchMessageHtml = `
                    <span class="tds-search__result-msg">
                        ${tds_translate('search_error')}
                    </span>
                `;
                moreResultsBtn.insertAdjacentHTML('beforebegin', searchMessageHtml);
                return;
            }

            const searchResultItemsHtml = tds_getSearchResultItemsHtml(result.data.pages);
            searchResultList.insertAdjacentHTML('beforeend', searchResultItemsHtml);
            tds_setSearchResultHandlers();
            nextPage++;
            if (nextPage > result.data.pagin) moreResultsBtn.remove();
        });
    };
}

function tds_setSearchResultHandlers() {
    const searchResultItems = document.querySelectorAll('.tds-search__result-link:not([data-has-handlers])');
    searchResultItems.forEach(item => {
        item.addEventListener('click', tds_handleLinkClick);
        item.setAttribute('data-has-handlers', '');
    });
}

function tds_initCodeHightlight() {
    const codeBlocks = document.querySelectorAll('.t-redactor__highlightcode code');
    if (!codeBlocks.length) return;
    const codeScriptSrc = 'https://static.tildacdn.com/js/highlight.min.js';
    const codeStyleHref = 'https://static.tildacdn.com/css/highlight.min.css';
    const scriptElement = document.head.querySelector(`script[src="${codeScriptSrc}"]`);
    const styleElement = document.head.querySelector(`link[href="${codeStyleHref}"]`);
    if (!scriptElement) {
        tds_connectScript(codeScriptSrc, tds_highlightCodeBlocks.bind(null, codeBlocks));
    } else {
        tds_highlightCodeBlocks(codeBlocks);
    }
    if (!styleElement) {
        const codeFontHref = 'https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@400;700&display=swap';
        tds_connectStyle(codeStyleHref);
        tds_connectStyle(codeFontHref, () => {
            codeBlocks.forEach(block => (block.style.fontFamily = '"Source Code Pro", monospace'));
        });
    } else {
        codeBlocks.forEach(block => (block.style.fontFamily = '"Source Code Pro", monospace'));
    }
}

function tds_connectScript(src, callback) {
    const script = document.createElement('script');
    script.src = src;
    if (callback) script.onload = callback;
    document.head.appendChild(script);
}

function tds_connectStyle(href, callback) {
    const style = document.createElement('link');
    style.href = href;
    style.type = 'text/css';
    style.rel = 'stylesheet';
    if (callback) style.onload = callback;
    document.head.appendChild(style);
}

function tds_highlightCodeBlocks(codeBlocks) {
    if (!window.hljs) return;
    codeBlocks.forEach(block => {
        window.hljs.highlightBlock(block);
    });
}

function tds_getMembersPage(token, pageurl, docid) {
    const URL = window.tds.membersURL + '/getpage/';
    const body = {
        projectid: window.projectid,
        token,
        pageurl,
        docid,
    };

    return tds_fetch(URL, 'POST', body);
}

function tds_getMembersStyles() {
    const ssStyles = sessionStorage.getItem('tilda_members_styles' + window.projectid);
    if (!window.tildaMembers.settingStyles && !ssStyles) {
        const body = {
            projectid: window.projectid,
        };
        const URL = window.tds.membersURL + '/getstyles/';

        tds_fetch(URL, 'POST', body).then(response => {
            if (!response.isOk || (response.data && response.data.status !== 'ok')) {
                window.location.reload();
                return;
            }
            window.tildaMembers.settingStyles = response.data.data;
            sessionStorage.setItem('tilda_members_styles' + window.projectid, JSON.stringify(response.data.data));
            tma__userbar__drawWidget();
        });
    } else if (!window.tildaMembers.settingStyles) {
        window.tildaMembers.settingStyles = JSON.parse(ssStyles);
    }
}

function tds_handleHeadScriptLoad() {
    window.tds.headScriptsLoaded++;
    if (window.tds.headScriptsCount === window.tds.headScriptsLoaded) {
        tds_getMembersStyles();
    }
}

function tds_drawHeadersNav() {
    const headers = window.tds.contentContainer.querySelectorAll('h2');
    if (!headers.length) return;

    let headersList = '';
    headers.forEach((header, index) => {
        const headerId = tds_transliterate(header.innerText) + '-' + index;
        header.dataset.id = headerId;
        headersList += `
            <li class="tds-hnav__item">
                <a class="tds-hnav__link" href="#${headerId}">${header.innerText}</a>
            </li>
        `;
    });
    const headersNavHtml = `
        <aside class="tds-hnav">
            <button class="tds-hnav__button" aria-label="${tds_translate('show_navigation')}">
                <svg viewBox="0 0 45 45">
                    <path d="M18.0064 31.0672V28.9732H36.3161V31.0672H18.0064ZM18.0064 22.8193V20.7254H36.3161V22.8193H18.0064ZM18.0064 14.5544V12.4605H36.3161V14.5544H18.0064ZM10.5362 32.5277C9.83631 32.5277 9.23864 32.2854 8.74317 31.8009C8.24772 31.3164 8 30.7239 8 30.0235C8 29.323 8.24511 28.7277 8.73533 28.2375C9.22556 27.7472 9.82089 27.5021 10.5213 27.5021C11.2217 27.5021 11.8142 27.7516 12.2987 28.2506C12.7833 28.7497 13.0255 29.347 13.0255 30.0427C13.0255 30.7231 12.7818 31.3073 12.2943 31.7955C11.8068 32.2836 11.2208 32.5277 10.5362 32.5277ZM10.5362 24.2798C9.83631 24.2798 9.23864 24.033 8.74317 23.5395C8.24772 23.0459 8 22.4568 8 21.7724C8 21.0879 8.24844 20.4989 8.74533 20.0053C9.24225 19.5117 9.8396 19.265 10.5374 19.265C11.2199 19.265 11.8052 19.5117 12.2933 20.0053C12.7815 20.4989 13.0255 21.0879 13.0255 21.7724C13.0255 22.4568 12.7818 23.0459 12.2943 23.5395C11.8068 24.033 11.2208 24.2798 10.5362 24.2798ZM10.5074 16.0148C9.82294 16.0148 9.23392 15.7681 8.74033 15.2745C8.24678 14.7809 8 14.1919 8 13.5074C8 12.8229 8.24678 12.2339 8.74033 11.7403C9.23392 11.2468 9.82472 11 10.5128 11C11.2008 11 11.7916 11.2468 12.2852 11.7403C12.7788 12.2339 13.0255 12.8229 13.0255 13.5074C13.0255 14.1919 12.779 14.7809 12.2858 15.2745C11.7927 15.7681 11.1999 16.0148 10.5074 16.0148Z"/>
                </svg>
            </button>
            <ul class="tds-hnav__list" aria-label="${tds_translate('navigation')}">
                ${headersList}
            </ul>
        </aside>
    `;

    const firstContentElement = window.tds.contentContainer.firstElementChild.nextElementSibling;
    window.tds.contentContainer.insertAdjacentHTML('afterbegin', headersNavHtml);
    const hnav = window.tds.contentContainer.querySelector('.tds-hnav');
    const top = firstContentElement.offsetTop;
    hnav.style.top = top + 'px';

    tds_setHeadersNavHandlers();
}

function tds_setHeadersNavHandlers() {
    const hnavButton = document.querySelector('.tds-hnav__button');
    if (hnavButton) hnavButton.addEventListener('click', tds_toggleHnavPanel);

    window.tds.docHeaders = document.querySelectorAll('h2');

    window.tds.scrollHandler = tds_debounce(tds_handleDocScroll, 10);
    window.tds.contentWrapper.addEventListener('scroll', window.tds.scrollHandler);
}

function tds_updateHnavPosition(event) {
    const hnav = document.querySelector('.tds-hnav');
    if (!hnav || window.matchMedia('(max-width: 1399px)').matches) return;
    const anchorElement = window.tds.contentContainer.querySelector('.tds-content__header-wrapper + *');
    if (!anchorElement) return;
    const anchorTop = anchorElement.getBoundingClientRect().top;
    const contentRect = window.tds.contentContainer.getBoundingClientRect();
    const isFixed = hnav.classList.contains('tds-hnav_fixed');

    if (anchorTop <= 0) {
        hnav.classList.add('tds-hnav_fixed');
        if (!isFixed || event.type === 'resize') {
            hnav.style.left = contentRect.left + contentRect.width + 'px';
        }
    } else {
        hnav.classList.remove('tds-hnav_fixed');
        hnav.style.top = anchorElement.offsetTop + 'px';
        if (isFixed) {
            hnav.style.removeProperty('left');
        }
    }
}

function tds_toggleHnavPanel() {
    const hnavList = document.querySelector('.tds-hnav__list');
    if (!hnavList) return;

    hnavList.classList.toggle('tds-hnav__list_visible');
}

function tds_closeHnavPanel(event) {
    const hnavList = document.querySelector('.tds-hnav__list');
    if (!hnavList || event.target.closest('.tds-hnav')) return;

    hnavList.classList.remove('tds-hnav__list_visible');
}

function tds_handleDocScroll() {
    if (!window.tds.docHeaders || !window.tds.docHeaders.length || window.matchMedia('(max-width: 1399px)').matches)
        return;
    let topOffsets = [];
    window.tds.docHeaders.forEach(header => {
        const headerRect = header.getBoundingClientRect();
        topOffsets.push({header, top: headerRect.top});
    });

    topOffsets = topOffsets.filter(item => item.top <= 11);
    const activeLink = document.querySelector('.tds-hnav__link_active');
    if (activeLink) activeLink.classList.remove('tds-hnav__link_active');
    if (topOffsets.length) {
        const targetHeader = topOffsets.reduce((prev, current) => {
            if (current.top > prev.top) {
                return current;
            } else {
                return prev;
            }
        }, topOffsets[0]).header;
        const targetLink = document.querySelector(`.tds-hnav__link[href="#${targetHeader.dataset.id}"]`);
        if (targetLink) targetLink.classList.add('tds-hnav__link_active');
    }
}

function tds_drawAuthor() {
    const doc = window.tds.tree.find(doc => doc.uuid === window.uuid);
    if (!doc || !doc.author) return;

    let container = document.querySelector('.tds-pubinfo__wrapper');
    if (!container) {
        let pubinfo = document.querySelector('.tds-pubinfo');
        if (!pubinfo) {
            pubinfo = document.createElement('div');
            pubinfo.classList.add('tds-pubinfo');
            window.tds.contentContainer.appendChild(pubinfo);
        }
        container = document.createElement('div');
        container.classList.add('tds-pubinfo__wrapper');
        pubinfo.appendChild(container);
    }
    const authorHtml = doc.author
        .split(',')
        .map(author => {
            return `<author class="tds-pubinfo__author">${author.trim()}</author>`;
        })
        .join('');
    container.insertAdjacentHTML('beforeend', authorHtml);
}

function tds_drawTime() {
    const doc = window.tds.tree.find(doc => doc.uuid === window.uuid);
    if (!doc || (!doc.publishdate && !doc.published)) return;
    let date = new Date(parseInt((doc.publishdate || doc.published) * 1000, 10));
    if (!date) return;

    let container = document.querySelector('.tds-pubinfo');
    if (!container) {
        container = document.createElement('div');
        container.classList.add('tds-pubinfo');
        window.tds.contentContainer.appendChild(container);
    }

    const localDate = date.toLocaleDateString();
    const dateHtml = `<time class="tds-pubinfo__time" datetime="${date.toISOString()}">${localDate}</time>`;
    container.insertAdjacentHTML('beforeend', dateHtml);
}

function tds_transliterate(string) {
    const replaceMap = new Map([
        ['ё', 'yo'],
        ['й', 'i'],
        ['ц', 'ts'],
        ['у', 'u'],
        ['к', 'k'],
        ['е', 'e'],
        ['н', 'n'],
        ['г', 'g'],
        ['ш', 'sh'],
        ['щ', 'sch'],
        ['з', 'z'],
        ['х', 'h'],
        ['ъ', ''],
        ['ф', 'f'],
        ['ы', 'i'],
        ['в', 'v'],
        ['а', 'a'],
        ['п', 'p'],
        ['р', 'r'],
        ['о', 'o'],
        ['л', 'l'],
        ['д', 'd'],
        ['ж', 'zh'],
        ['э', 'e'],
        ['я', 'ya'],
        ['ч', 'ch'],
        ['с', 's'],
        ['м', 'm'],
        ['и', 'i'],
        ['т', 't'],
        ['ь', ''],
        ['б', 'b'],
        ['ю', 'yu'],
    ]);
    string = string.replace(/\s\s/g, ' ');
    string = string.replace(/\s/g, '-');
    string = string.toLocaleLowerCase();
    let transliteratedString = '';
    for (let i = 0; i < string.length; i++) {
        const char = string[i];
        const replacedChar = replaceMap.get(char);
        if (typeof replacedChar !== 'undefined') {
            transliteratedString += replacedChar;
        } else {
            transliteratedString += char;
        }
    }
    transliteratedString = transliteratedString.replace(/[^a-z0-9-]/g, '');
    return transliteratedString;
}

function tds_debounce(f, ms) {
    let isCooldown = false;

    return function () {
        if (isCooldown) return;
        f.apply(this, arguments);
        isCooldown = true;
        setTimeout(() => (isCooldown = false), ms);
    };
}

function tds_getUniqueID() {
    let result = '';
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const charactersLength = characters.length;
    const length = Math.floor(Math.random() * 5 + 5);
    for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}

function tds_scrollIntoView(el, topOffset) {
    let scrollContainer = el.parentElement;
    while (scrollContainer) {
        let overFlowStyle = window.getComputedStyle(scrollContainer, null).getPropertyValue('overflow').split(' ');
        overFlowStyle = overFlowStyle[+(overFlowStyle.length === 2)];
        if (['auto', 'scroll'].includes(overFlowStyle)) break;
        scrollContainer = scrollContainer.parentElement;
    }
    if (!scrollContainer) return;
    if (window.tds.scrollAnimation) {
        cancelAnimationFrame(window.tds.scrollAnimation);
        window.tds.scrollAnimation = null;
    }
    const duration = 500;
    let start;
    const startContainerScrollTop = scrollContainer.scrollTop;
    const containerTop = scrollContainer.getBoundingClientRect().top;
    const elementTop = el.getBoundingClientRect().top;
    const endContainerScrollTop = startContainerScrollTop + elementTop - containerTop - topOffset;

    function step(timestamp) {
        start = start === undefined ? timestamp : start;
        const progress = easeInOutCubic((timestamp - start) / duration);
        scrollContainer.scrollTop =
            (endContainerScrollTop - startContainerScrollTop) * Math.min(progress, 1) + startContainerScrollTop;

        if (progress < 1) {
            window.tds.scrollAnimation = requestAnimationFrame(step);
        } else {
            scrollContainer.scrollTop = endContainerScrollTop;
            window.tds.scrollAnimation = null;
        }
    }
    window.tds.scrollAnimation = requestAnimationFrame(step);

    function easeInOutCubic(x) {
        return x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2;
    }
}

function tds_drawSibling() {
    if (window.tds.projectSettings.issiblingdocslinkshidden) return;
    const currentDoc = window.tds.tree.find(doc => doc.uuid === window.uuid);
    const isValidDoc = doc => {
        return doc && !doc.ishomepage && !doc.isfolder && !doc.islink;
    };
    if (!isValidDoc(currentDoc)) return;
    const orderedDocs = [];
    let docIndex = -1;
    document.querySelectorAll('.tds-docslist .tds-panel__link').forEach(el => {
        const uuid = el.getAttribute('data-uuid');
        const doc = window.tds.tree.find(doc => doc.uuid === uuid);
        if (isValidDoc(doc)) {
            orderedDocs.push(doc);
            if (currentDoc.uuid === doc.uuid) {
                docIndex = orderedDocs.length - 1;
            }
        }
    });
    if (docIndex === -1) return;

    const prevDoc = orderedDocs[docIndex - 1];
    const nextDoc = orderedDocs[docIndex + 1];
    if (!prevDoc && !nextDoc) return;

    const container = document.createElement('div');
    container.classList.add('tds-sibling');
    const wrapper = document.createElement('div');
    wrapper.classList.add('tds-sibling__wrapper');
    container.appendChild(wrapper);

    const arrowHtml = `
        <svg class="tds-icon" viewBox="0 0 13 13">
            <path d="M5.65383 12.3077L0 6.65383L5.65383 1L6.70765 2.05383L2.10765 6.65383L6.70765 11.2538L5.65383 12.3077Z"/>
        </svg>
    `;
    if (prevDoc) {
        const link = document.createElement('a');
        link.classList.add('tds-sibling__link', 'tds-sibling__link_prev');
        link.href = window.location.origin + '/tdocs/' + prevDoc.fullPath;
        const linkSpan = document.createElement('span');
        linkSpan.innerHTML = prevDoc.title;
        link.appendChild(linkSpan);
        link.insertAdjacentHTML('afterbegin', arrowHtml);
        wrapper.appendChild(link);
    }
    if (nextDoc) {
        const link = document.createElement('a');
        link.classList.add('tds-sibling__link', 'tds-sibling__link_next');
        link.href = window.location.origin + '/tdocs/' + nextDoc.fullPath;
        const linkSpan = document.createElement('span');
        linkSpan.innerHTML = nextDoc.title;
        link.appendChild(linkSpan);
        link.insertAdjacentHTML('beforeend', arrowHtml);
        wrapper.appendChild(link);
    }
    window.tds.contentWrapper.appendChild(container);
}

function tds_setCover() {
    const currentDoc = window.tds.tree.find(doc => doc.uuid === window.uuid);
    if (!currentDoc) return;
    const {coverimage, covercolor, coverfilter, coverheadercolor} = currentDoc;
    if (!coverimage && !covercolor) return;
    const headerWrapper = window.tds.contentWrapper.querySelector('.tds-content__header-wrapper');
    const headerGradient = headerWrapper.querySelector('.tds-content__header-gradient');
    const header = headerWrapper.querySelector('h1');
    if (coverheadercolor) {
        header.style.color = coverheadercolor;
    }
    if (coverimage && coverfilter) {
        headerGradient.style.background = coverfilter;
    }
    if (coverimage) {
        headerWrapper.style.backgroundImage = `url(${coverimage})`;
    } else if (covercolor) {
        const isGradient = covercolor.startsWith('linear-gradient') || covercolor.startsWith('radial-gradient');
        if (isGradient) {
            headerWrapper.style.backgroundImage = covercolor;
        } else {
            headerWrapper.style.backgroundColor = covercolor;
        }
    }
    headerWrapper.classList.add('tds-content__header-wrapper_cover');
}

function tds_fetch(url, method, body) {
    return fetch(url, {
        method: method,
        headers:
            method === 'GET' || method === 'HEAD' || !body
                ? undefined
                : {
                      'Content-Type': 'application/json',
                  },
        body: method === 'GET' || method === 'HEAD' || !body ? undefined : JSON.stringify(body),
    })
        .then(response => {
            if (!response.ok) throw new Error(response.statusText);
            return response.json();
        })
        .then(data => {
            if (!data) throw new Error('Load error');
            return {isOk: true, error: null, data: data};
        })
        .catch(error => {
            return {isOk: false, error: error, data: {}};
        });
}

function tds_initLazyLoad() {
    if (window.tds.projectSettings.islazyloaddisabled) return;

    if (window.tds.observer) window.tds.observer.disconnect();
    const observerOptions = {
        root: window.tds.contentWrapper,
        rootMargin: '0px 0px 50%',
    };
    window.tds.observer = new IntersectionObserver(tds_handleLazy, observerOptions);

    const figures = window.tds.contentContainer.querySelectorAll('figure');
    figures.forEach(figure => {
        window.tds.observer.observe(figure);
    });
}

function tds_handleLazy(entries, observer) {
    entries.forEach(entry => {
        const figure = entry.target;
        if (figure.hasAttribute('data-is-loaded')) {
            observer.unobserve(figure);
            return;
        }

        if (entry.intersectionRatio > 0) {
            tds_loadImage(figure);
            observer.unobserve(figure);
        }
    });
}

function tds_loadImage(figure) {
    const img = figure.querySelector('img');
    const meta = figure.querySelector('meta[itemprop="image"]');
    const fullURL = meta ? meta.getAttribute('content') : '';
    if (!img || !fullURL) return;

    const fakeImage = new Image();
    const imageStyles = img.getAttribute('style');
    if (img.alt) fakeImage.alt = img.alt;
    if (imageStyles) fakeImage.style = imageStyles;
    fakeImage.onload = () => {
        img.replaceWith(fakeImage);
    };
    fakeImage.src = fullURL;

    figure.setAttribute('data-is-loaded', '');
}

function tds_initMarkdownBlocks(callback) {
    const markdownBlocks = window.tds.contentContainer.querySelectorAll('.t-redactor__markdown');
    if (!markdownBlocks.length) return callback();

    const scriptUrl =
        'https://front.tildacdn.com/redactor/block-editor/public/tilda-text-editor-markdown-renderer.min.js';
    const existingScript = document.querySelector(`script[src="${scriptUrl}"]`);

    if (!existingScript) {
        tds_connectScript(scriptUrl, () => {
            window.tte__renderMarkdownBlocks();
            callback();
        });
    } else {
        window.tte__renderMarkdownBlocks();
        callback();
    }
}

function tds_getDict() {
    return {
        load_error: {
            RU: 'Ошибка загрузки. Пожалуйста, перезагрузите страницу.',
            EN: 'Load error. Please refresh the page.',
        },
        breadcrubs: {
            RU: 'Навигационная цепочка',
            EN: 'Breadcrumbs',
        },
        search: {
            RU: 'Что вы хотите найти?',
            EN: 'What do you want to find?',
        },
        search_open: {
            RU: 'Поиск по документам',
            EN: 'Search',
        },
        search_close: {
            RU: 'Закрыть панель поиска',
            EN: 'Cancel search',
        },
        searching: {
            RU: 'Ищем',
            EN: 'Searching',
        },
        search_no_result: {
            RU: 'Ничего не нашлось',
            EN: 'Nothing was found',
        },
        search_type: {
            RU: 'Продолжайте ввод',
            EN: 'Continue typing',
        },
        search_load: {
            RU: 'Загрузить еще',
            EN: 'Load more',
        },
        search_error: {
            RU: 'Ошибка поиска. Пожалуйста, повторите попытку позже.',
            EN: 'Search error. Please try again later.',
        },
        copy_link: {
            RU: 'Скопировать ссылку',
            EN: 'Copy link',
        },
        navigation: {
            RU: 'Навигация по документу',
            EN: 'Document navigation',
        },
        show_navigation: {
            RU: 'Показать навигацию по документу',
            EN: 'Show document navigation',
        },
    };
}

function tds_translate(key) {
    const DEFAULT_LANG = 'EN';
    const {lang} = window;
    const dict = tds_getDict();
    const translations = dict[key];
    if (!translations) return key;

    return translations[lang] || translations[DEFAULT_LANG] || key;
}
